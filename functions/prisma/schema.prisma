generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("ATLAS_URI")
}

model sale {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  author         String
  title          String
  description    String
  category       Int
  created_at     DateTime  @default(now()) @db.Timestamp
  booked         Boolean   @default(false)
  bookedBy       String?
  imagesDesc     String[]
  imagesBookable Boolean[]
}

model place {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  lat         Float
  lng         Float
  title       String
  description String
  category    Int
  uploaded_by String
  created_at  DateTime @default(now()) @db.Timestamp
  likes       user[]
  like        like[]

  @@index([category])
}

model LatLng {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  lat Float
  lng Float
}

model event {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  date       DateTime
  endDate    DateTime
  author     String
  lat        Float
  lng        Float
  place      String   @db.ObjectId
  likes      String[]
  category   Int
  attributes String[]
  created_at DateTime @default(now()) @db.Timestamp

  @@index([place])
}

model user {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  uid        String  @unique
  name       String
  username   String
  title      String?
  fcm        String?
  textToType String?
  page       page?   @relation(fields: [pageId], references: [id])
  pageId     String? @db.ObjectId
  place      place?  @relation(fields: [placeId], references: [id])
  placeId    String? @db.ObjectId
}

model page {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  uid        String?    @unique
  background String?
  buziness   buziness[]
  images     images[]
  texts      text[]
  locations  location[]

  user user[]
}

model buziness {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  page        page   @relation(fields: [pageId], references: [id])
  pageId      String @db.ObjectId
  uid         String
  num         Int
  name        String
  description String
  emoji       Int?
}

model images {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  page   page     @relation(fields: [pageId], references: [id])
  pageId String   @db.ObjectId
  images String[]
  texts  String[]
}

model text {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  page   page   @relation(fields: [pageId], references: [id])
  pageId String @db.ObjectId
  text   String
}

model location {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  page   page   @relation(fields: [pageId], references: [id])
  pageId String @db.ObjectId
  lat    Float
  lng    Float
  title  String
}

model like {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  uid     String
  place   place  @relation(fields: [placeId], references: [id])
  placeId String @db.ObjectId
}
